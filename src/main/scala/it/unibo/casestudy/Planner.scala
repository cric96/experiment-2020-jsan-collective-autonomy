package it.unibo.casestudy

import it.unibo.alchemist.model.scafi.ScafiIncarnationForAlchemist._
import it.unibo.casestudy.Task.{Anyone, Capability}
import it.unibo.casestudy.WildlifeMonitoring.Program
import it.unibo.casestudy.WildlifeTasks.NoTask

import scala.util.Random

/**
 * It choose the task that will be executed by the agent
 * @param random the random generator
 */
case class Planner(random: Random) {

  /**
   * given a sequence of task, this method returns the task that will be executed by the agent
   * @param myId
   * @param leaderId
   * @param capabilities the capabilities that this node declare to have
   * @param tasks the tasks assigned to this node
   * @param collectiveThr the probability to choose a "collective" (i.e. generated by the leader) task or a "local" task (generated by the agent)
   * @return
   */
  def eval(
    myId: ID,
    leaderId: ID,
    capabilities: Set[Capability],
    tasks: Seq[Task[Program, Actuation]],
    collectiveThr: Double
  ): Task[Program, Actuation] = {
    val collective = random.nextDouble() <= collectiveThr
    tasks
      .filter(a => a.source == (if (collective) leaderId else myId))
      .find(required =>
        capabilities.intersect(required.capabilities) == capabilities || required.capabilities.contains(Anyone)
      )
      .getOrElse(NoTask(leaderId))
  }

}
