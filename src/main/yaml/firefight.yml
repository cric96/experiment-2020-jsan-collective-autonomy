incarnation: scafi
#Distance unit: kilometers
#Time unit: Seconds
#Temperature unit: Celsius
variables:
  dronesStationsRation:
    formula: 0.1

  drones: &drones
    formula: 100

  stations: &stations
    formula: drones * dronesStationsRation

  random: &random
    min: 0
    max: 100
    step: 1
    default: 0

  range: &range
    formula: 100

  worldSize: &worldSize
    formula: 500

  originX: &originX
    formula: worldSize / -2

  originY: &originY
    formula: worldSize / -2

  endX: &endX
    formula: worldSize / 2

  endY: &endY
    formula: worldSize / 2

  combiner: &combiner
    formula: new it.unibo.alchemist.actions.SumCombiner()
    language: scala

  movementRate : &movementRate
    formula: 10

  fireAverageTime : &fireAverageTime
    formula: 0.01

  expandFireRate: &expandFireRate
    formula: 1.0

  temperatureLayer: &temperatureLayer
    formula: >
      "constant"

  environmentTemperature: &environmentTemperature
    formula: 25.0

  waterAmount: &waterAmount
    formula: 1.0

seeds:
  scenario: *random
  simulation: *random

environment:
  type: Continuous2DEnvironment
  parameters: []

network-model:
  type: ConnectWithinDistance #*connectionType
  parameters: [*range]

layers:
  - type: UniformLayer
    molecule: constant
    parameters: [ *environmentTemperature ]
  - type: BidimensionalGaussianLayer
    molecule: fire
    parameters: [ 0, -200.0, -200.0, 15.0, 15.0, 20.0, 20.0]

pools:
  - pool: &program
      - time-distribution:
          type: ExponentialTime
          parameters: [1] #in average, the program is computed each second
        type: Event
        actions:
          - type: FireSensing #sense fire in the forest
            parameters: [ *temperatureLayer ]
          - type: WaterDrop #drop water to stop fire
            parameters: [ *waterAmount ]
          - type: RunScafiProgram
            parameters: [it.unibo.casestudy.FireFighting, 5.0] # second argument is retention time
      - program: send #broadcast the value to the node neighbourhood
  # Drone behaviour
  - pool: &explore
      - time-distribution: *movementRate
        type: MotorSchemaReaction
        parameters: [ *combiner ]
        actions:
          #- type: it.unibo.alchemist.model.implementations.actions.Alignment
          #  parameters : [0.1]
          #- type: it.unibo.alchemist.model.implementations.actions.Cohesion
          #  parameters : [0.001]
          - type: Separation
            parameters: [ 40.0, 0.001 ]
          #- type: it.unibo.alchemist.model.implementations.actions.Seek
          #  parameters: [ 0.0, 0.0, 0.01 ]
          - type: ExploreArea
            parameters: [ 0.0, 0.0, *worldSize, 0.1 ]
  - pool: &flock
      - time-distribution: *movementRate
        type: MotorSchemaReaction
        parameters: [ *combiner ]
        actions:
          - type: Alignment
            parameters : [0.1]
          - type: Cohesion
            parameters : [0.001]
          - type: Separation
            parameters: [ 40.0, 0.01 ]
          - type: Wander #work as a wind
            parameters : [100, 0.01]
  - pool: &areaExplore
      - time-distribution: *movementRate
        type: MotorSchemaReaction
        parameters: [ *combiner ]
        actions:
          - type: Seek
            parameters: [ 0.0, 0.0, 0.05 ]
          - type: Separation
            parameters: [ 40.0, 0.003 ]
          - type: Cohesion
            parameters: [ 0.001 ]
          - type: Wander #work as a wind
            parameters: [ 100, 0.05 ]
  #Fire spawner
  - pool: &fireSpawn
      - time-distribution:
          type: ExponentialTime
          parameters: [ *fireAverageTime ]
        type: Event
        actions:
          - type: FireSpawn
            parameters: [ *originX, *originY, *endX, *endY, *expandFireRate ]

displacements:
  - in:
      type: Rectangle
      parameters: [ *drones, *originX, *originY, *worldSize, *worldSize]
    nodes:
      type: DroneNode2D
      parameters: [2]
    programs:
      - *program
      - *areaExplore
    contents:
      - molecule: drone
        concentration: true
      - molecule: temperature
        concentration: *environmentTemperature

  - in:
      type: Rectangle
      parameters: [ *stations, *originX, *originY, *worldSize, *worldSize ]
    programs:
      - *program
    contents:
      - molecule: station
        concentration: true
      - molecule: temperature
        concentration: *environmentTemperature

  - in:
      type: Point
      # Using a constructor taking (x,y) coordinates
      parameters: [ -0.0, -0.0 ] #out of bounds. This node is needed only for spawning fire.
    programs:
      - *fireSpawn

export:
  - time


