incarnation: scafi
#Distance unit: meters
#Time unit: Seconds
#Speed unit: m/s
variables:
  animalsForGroup: &animalsForGroup
    formula: 20

  drones: &drones
    formula: 50

  healer: &healer
    formula: 50

  random: &random
    min: 0
    max: 4
    step: 1
    default: 0

  mutableArea: &mutableArea
    min: 0
    max: 1
    step: 1
    default: 0

  alpha: &alpha
    min: 0.01
    max: 0.5
    step: 0.01
    default: 0.01

  explorerLabel : &explorerLabel
    formula: >
      """ "explorer" """
    language: scala

  healerLabel: &healerLabel
    formula: >
      """ "healer" """
    language: scala

  stationaryLabel: &stationaryLabel
    formula: >
      """ "stationary" """
    language: scala

  bluetoothRange: &bluetoothRange
    formula: 200 #meter

  loraRange: &loraRange
    formula: 700 #meter

  worldSize: &worldSize
    formula: 2500 #meter

  explorationRange: &explorationRange
    formula: worldSize / 2 #meter

  droneVelocity: &droneVelocity
    formula: 8.3

  impalaVelocity: &impalaVelocity
    formula: 8.3

  zebraVelocity: &zebraVelocity
    formula: 8.3

  top: &top
    formula: worldSize / 2

  bottom: &bottom
    formula: worldSize / -2

  velocityCombiner: &velocityCombiner
    formula: new it.unibo.alchemist.DifferentialCombiner()
    language: scala

  animalCombiner: &animalCombiner
    formula: new it.unibo.alchemist.SumCombiner()
    language: scala

  evaluationRate: &evaluationRate
    formula: 1

  movementRate: &movementRate
    formula: 10

  dangerSpawnRate: &dangerSpawnRate
    formula: 0.01
seeds:
  scenario: *random
  simulation: *random

environment:
  type: Continuous2DEnvironment
  parameters: []

network-model:
  type: DualRadioLinkingRule #*connectionType
  parameters: [*loraRange, *bluetoothRange]

pools:
  # Danger animal "spawner"
  - pool: &ill
      - time-distribution:
          type: ExponentialTime
          parameters: [ *dangerSpawnRate ]
        type: Event
        actions:
          - type: IllAnimal
            parameters: [ 200 ]
  # Main aggregate program evaluation
  - pool: &program
      - time-distribution:
          type: ExponentialTime
          parameters: [ *evaluationRate ]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.casestudy.FeedbackMutableArea, 5.0] # second argument is retention time
      - program: send #broadcast the value to the node neighbourhood
  # "Collar" aggregate program evaluation
  - pool: &animalBehaviour
      - time-distribution:
          type: ExponentialTime
          parameters: [ *evaluationRate ] #in average, the program is computed each second
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [ it.unibo.casestudy.SmartCollarBehaviour, 5.0 ] # second argument is retention time
      - program: send #broadcast the value to the node neighbourhood
  # Drone movement behaviour
  - pool: &areaExplore
      - time-distribution: *movementRate
        type: MotorSchemaReaction
        parameters: [ *velocityCombiner ]
        actions:
          - type: Separation
            parameters: [ 60.0, 0.1 ]
          - type: Alignment
            parameters: [ 0.03 ]
          - type: Cohesion
            parameters: [ 0.001 ]
          - type: ExploreArea
            parameters: [ 0, 0, *explorationRange, 10, 0.5]
  # Animals movement behaviour
  - pool: &animalsWander
      #- time-distribution: ##### FOR RandomWayPoint, but currently it is not deterministic (due the concurrency)
      #    type: DiracComb
      #    parameters: [ *movementRate ]
      - time-distribution: *movementRate
        type: MotorSchemaReaction
        parameters: [ *animalCombiner ]
        actions:
          - type: Separation
            parameters: [ 40.0, 0.5 ]
          - type: RandomWayPoint
            #centerX: Double, centerY: Double, radius: Double, thr: Double, maxSleep : Double, weight: Double
            parameters: [ 0, 0, *explorationRange, 10, 5, 0.1]

displacements:
# DRONES DISPLACEMENT
  - in:
      type: Rectangle
      parameters: [ *drones, *bottom, *bottom, *worldSize, *worldSize]
    nodes:
      type: DroneNode2D
      parameters: [ *droneVelocity ]
    programs:
      - *program
      - *areaExplore
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: true
      - molecule: danger
        concentration: false
      - molecule: type
        concentration: *explorerLabel
      - molecule: areaType
        concentration: *mutableArea
      - molecule: alpha
        concentration: *alpha
  - in:
      type: Rectangle
      parameters: [ *healer, *bottom, *bottom, *worldSize, *worldSize]
    nodes:
      type: DroneNode2D
      parameters: [ 8.3 ]
    programs:
      - *program
      - *areaExplore
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: true
      - molecule: danger
        concentration: false
      - molecule: type
        concentration: *healerLabel
      - molecule: areaType
        concentration: *mutableArea
      - molecule: alpha
        concentration: *alpha
# ANIMALS DISPLACEMENT
  - in:
      type: Rectangle
      parameters: [ *animalsForGroup, 0, 0, 200, 200 ]
    nodes:
      type: Animal2D
      parameters: [ *zebraVelocity, "zebras"]
    programs:
      - *animalsWander
      - *ill
      - *animalBehaviour
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: false
      - molecule: danger
        concentration: false
  - in:
      type: Rectangle
      parameters: [ *animalsForGroup, *top, *bottom, 200, 200 ]
    nodes:
      type: Animal2D
      parameters: [ *impalaVelocity, "impala" ]
    programs:
      - *animalsWander
      - *ill
      - *animalBehaviour
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: false
      - molecule: danger
        concentration: false
  - in:
      type: Rectangle
      parameters: [ *animalsForGroup, *top, *top, 200, 200 ]
    nodes:
      type: Animal2D
      parameters: [ *zebraVelocity, "zebras2" ]
    programs:
      - *animalsWander
      - *ill
      - *animalBehaviour
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: false
      - molecule: danger
        concentration: false
  - in:
      type: Rectangle
      parameters: [ *animalsForGroup, *bottom, *bottom, 200, 200 ]
    nodes:
      type: Animal2D
      parameters: [ *impalaVelocity, "impala2" ]
    programs:
      - *animalsWander
      - *ill
      - *animalBehaviour
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: false
      - molecule: danger
        concentration: false
  - in:
      type: Rectangle
      parameters: [ *animalsForGroup, *bottom, *top, 200, 200 ]
    nodes:
      type: Animal2D
      parameters: [ *zebraVelocity, "zebras3" ]
    programs:
      - *animalsWander
      - *ill
      - *animalBehaviour
    contents:
      - molecule: station
        concentration: false
      - molecule: drone
        concentration: false
      - molecule: danger
        concentration: false
# STATIONS DISPLACEMENT
  - in:
      type: Grid
      parameters: [ *bottom, *bottom, *top, *top, 700, 700, 500, 500]
    nodes:
      type: LoraStation
    programs:
      - *program
    contents:
      - molecule: station
        concentration: true
      - molecule: drone
        concentration: false
      - molecule: danger
        concentration: false
      - molecule: type
        concentration: *stationaryLabel
      - molecule: areaType
        concentration: *mutableArea
      - molecule: alpha
        concentration: *alpha
export:
  - time
  - molecule: danger
    aggregators: [ sum ] #Export danger count
